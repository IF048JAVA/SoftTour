package com.softserveinc.softtour.parsers;

import com.softserveinc.softtour.bean.BusRoute;
import com.softserveinc.softtour.parsers.constants.BusParserConstants;
import com.softserveinc.softtour.util.BusParserUrlGenerator;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

/**
* This class finds routes from selected by the user city to tour departure city.
* The routes data source is site: http://ticket.bus.com.ua
* This class use:
*     com.softserveinc.softtour.parsers.constants.BusParserConstants - contains used in this class constants
*     com.softserveinc.softtour.bean.BusRoute - represent bus route
*     com.softserveinc.softtour.util.BusParserUrlGenerator - generate web-page's url, that contains bus routes.
*/
public class BusParser implements BusParserConstants {

    /**
     * Parse results will be save in this list
     */
    private List<BusRoute> busRouteList;
    private String cityFrom;
    private String cityTo;

    /**
    * This variable represents date and time, when user go to the tour from departure city
    */
    private Date departureDateTime;

    /**
     * This variable represents previous date and time, reduced by three hours
     */
    private Date reducedDateTime;

    /**
    * This method creates new BusParser with such parameters:
    * @param cityFrom - user's chosen city
    * @param cityTo - tour departure city
    * @param departureDate - represent date, when user go to the tour from departure city, String in format yyyy-MM-dd
    * @param departureTime - represent time, when user go to the tour from departure city, String in format HH:mm
    */
    public BusParser(String cityFrom, String cityTo, String departureDate, String departureTime) {
        this.busRouteList = new ArrayList<>();
        this.cityFrom = cityFrom;
        this.cityTo = cityTo;
        try {
            /**
             * This variable contains departure date & time, converted from String to java.util.Date
             */
            this.departureDateTime = INPUT_DATE_TIME_FORMAT.parse(departureDate + departureTime);
        }catch (ParseException e){
            System.err.println("Unparsable data. Departure date - " + departureDate + " must be in format yyyy-MM-dd " +
                    "Departure time " + departureTime + " must be in format - HH:mm ");
        }
        this.reducedDateTime = new Date(departureDateTime.getTime() - FIRST_DATE_REDUCE);
    }

    /**
     * This method creates two connections:
     *     First connection finds routes on day, that is three hours earlier departureDateTime.
     *         The reason is that client must come to departure point earlier to pass registration to the plain.
     *         The registration passes about three hours.
     *     Second connection find routes on day, that is the day earlier then first connection.
     *
     *     Example: Departure date: 2014-11-12, departure time: 02:00.
     *     First connection will find routes on date: 2014-11-11.
     *     Second connection will find routes on date: 2014-11-10.
     *
     * In this case Strings firstDateUrl and secondDateUrl are the urls with reduced date parameters.
     * This Strings will be receive by using private method generateUrl.
     *
     * Web-pages with routes are encapsulate in Jsoup object Document.
     * Document will be generated by using private method connect.
     *
     * Private method addRoutes finds in the document bus routes data and adds bus routes to busRouteList.
     *
     * Methods connect and addRoutes used twice, because we have two urls for two departure dates.
     *
     * @return list of bus routes (represented by BusRoute class)
     */
    public List<BusRoute> parse() {
        BusParserUrlGenerator generator = new BusParserUrlGenerator();
        String[] urls = generator.createSearchUrl(cityFrom, cityTo, departureDateTime);
        Document document;
        try {
            for (String url : urls) {
                document = connect(url);
                addRoutes(document);
            }
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
            return busRouteList;
    }

    /**
     * @param url - web-page's url
     * @return web-page, encapsulated in Jsoup object Document
     */
    private Document connect(String url) throws IOException{
        String doc = Jsoup.connect(url).
                timeout(CONNECTION_TIMEOUT).
                ignoreContentType(true).
                execute().
                body();
        return Jsoup.parse(doc);
    }

    /**
     * This method gets from document bus routes data, create BusRoute objects and add routes to busRouteList.
     * @param document - web-page, encapsulated in Jsoup object Document
     */
    private void addRoutes(Document document){

        /**
         * This list contains rows from all tables in web-page with bus routes.
         * There were no tag-parameters like id, class, etc to find table rows, that we need.
         * The data, that will be use, starts from seven element of the list.
         */
        List<Element> elementList = document.getElementsByTag(TAG_TR);
        for(int i = DATA_START_NUMBER; i < elementList.size(); i++){

            /**
             * cellList contains such data:
             * [index]:[value]
             *    0   : Tags tg, div and 4 span, not used
             *    1   : Bus date departure
             *    2   : Bus station contacts and tag b with departure time
             *    3   : Arrival time and city from (into the tag small)
             *    4   : Price
             *    5   : Distance
             *    6   : Percent of route stability
             *    7   : Route code & name
             *    8   : Mark of bus
             *    9   : Img
             *   10   : Empty tag td
             */
            List<Element> cellList = elementList.get(i).getElementsByTag(TAG_TD);

            /**
             * Return from method if elementList contains element with text: '*'
             * The data, contains after this element isn't need.
             */
            if (cellList.get(NOT_NEED_DATA_ELEMENT_NUMBER).text().equals(STAR)){
                return;
            }

            String departureDate = cellList.get(TABLE_CELL_DEPARTURE_DATE).text();
            String departureTime = cellList.get(TABLE_CELL_DEPARTURE_TIME).getElementsByTag(TAG_B).first().text();
            String departureDateTime = departureDate + departureTime;
            Date routeDepartureDate;
            try {
                routeDepartureDate = SIMPLE_DATE_TIME_FORMAT.parse(departureDateTime);
            } catch (ParseException e) {
                routeDepartureDate = new Date();
            }
            String changedFormatDepartureDate = SIMPLE_DATE_FORMAT.format(routeDepartureDate);


            /**
             * This block verify route dateTime.
             * If it is later then reduced dateTime(reduced on three hours), there is no need to parse rest data.
             */
            if(routeDepartureDate.before(reducedDateTime)){
                String id = cellList.get(TABLE_CELL_ROUTE).text();
                String arrivalTime = cellList.get(TABLE_CELL_ARRIVAL_TIME).ownText();
                String price = cellList.get(TABLE_CELL_PRICE).text();
                String arrivalDateTime = departureDate + arrivalTime;
                Date routeArrivalDate = null;
                try {
                    routeArrivalDate = SIMPLE_DATE_TIME_FORMAT.parse(arrivalDateTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                String onWayTime = calculateOnWayTime(routeDepartureDate, routeArrivalDate);
                BusRoute route = new BusRoute(id, cityFrom, cityTo, changedFormatDepartureDate, departureTime, onWayTime,
                        arrivalTime, price, price);
                busRouteList.add(route);
            }
         }
    }

    /**
     * @param routeDepartureDate - date and time departure
     * @param routeArrivalDate - date and time arrival. There is no arrival date on web-page, only time.
     *        That's why arrival time was joined with departure date.
     *        Then, if arrival date is earlier then departure date, it will increase the date by one day in this method
     * @return String hh:mm, where hh - hours, mm - minutes on way time.
     */
    private String calculateOnWayTime(Date routeDepartureDate, Date routeArrivalDate){
        if(routeArrivalDate.before(routeDepartureDate)){
            routeArrivalDate.setTime(routeArrivalDate.getTime() + ONE_DAY_IN_MILLISECONDS);
        }
        long timeOnWayInMilliseconds = routeArrivalDate.getTime() - routeDepartureDate.getTime();
        long onWayHours = TimeUnit.HOURS.convert(timeOnWayInMilliseconds, TimeUnit.MILLISECONDS);
        long onWayMinutes = TimeUnit.MINUTES.convert(timeOnWayInMilliseconds, TimeUnit.MILLISECONDS) -
                            onWayHours * MINUTES_IN_HOUR;

        StringBuilder onWayTime = new StringBuilder();

        /**
         * If hour or minutes less then 10, we can't represent time in format hh:mm.
         * Example: on way hour is 5, on way minutes is 8.
         *          Then, result String would be like this: 5:8
         *          That's why, if hours or minutes are less then 10, they must be fill with leading zero.
         */
        if(onWayHours < TEN){
            onWayTime.append(LEADING_ZERO).append(onWayHours);
        } else {
            onWayTime.append(onWayHours);
        }
        onWayTime.append(COLON);
        if(onWayMinutes < TEN){
            onWayTime.append(LEADING_ZERO).append(onWayMinutes);
        } else {
            onWayTime.append(onWayMinutes);
        }
        return onWayTime.toString();
    }

    @Override
    public String toString() {
        return "Bus route parser. Source: http://ticket.bus.com.ua ";
    }

}

